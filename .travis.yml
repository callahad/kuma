branches: master
language: minimal
git: { submodules: false }
jobs:
    include:
        - stage: "Lint"
          name: "General Lints"
          script:
            - "! git grep -n '^<<<<<<< '"  # Check for Git conflict markers

        - name: "Python Lints"
          language: python
          python: 3.8
          cache: pip
          install:
            - >-
              pip install --disable-pip-version-check
              black flake8 flake8-import-order
          script:
            - flake8 kuma docs tests
            - black --check --diff kuma docs tests

        - name: "JavaScript Lints"
          language: node_js
          node_js: 12
          cache: npm
          script:
            - scripts/ci-jslint
            - scripts/ci-flow

        - stage: "Test"
          name: "Documentation Build"
          language: python
          python: 3.8
          cache: pip
          install:
            - pip install -r docs/requirements.txt
          script:
            - sphinx-build -b html -d doctrees docs html

        - name: "Dockerized Tests"
          services: docker
          git: { submodules: true }
          env:
            UID=0
          cache:
            directories:
              - downloads
              - build
              - static
          script:
            - set -e
            # Build and boot containers
            - VERSION=latest make build-base
            - VERSION=latest make build-kuma
            - docker-compose up -d
            # Ensure services are ready
            - docker-compose run --rm -T web urlwait mysql://root:kuma@mysql:3306/developer_mozilla_org 30
            - docker-compose run --rm -T web urlwait http://elasticsearch:9200 30
            # Build assets
            - docker-compose exec -T web make clean
            - docker-compose exec -T web make localecompile
            - docker-compose exec -T web make build-static
            # Django setup
            - docker-compose exec -T web ./manage.py migrate
            - docker-compose exec -T web ./manage.py makemigrations --check --dry-run
            # Run tests
            - docker-compose exec -T web make coveragetest
            - docker-compose exec -T web npm test
            # Refresh locales
            - docker-compose exec -T web make localeextract
            - docker-compose exec -T web make localetest
            - docker-compose exec -T web make localecompile
            - git -C locale diff -G "^msgid " templates/LC_MESSAGES
            # Upload coverage
            - bash <(curl -s https://codecov.io/bash)
