branches: master
language: minimal
git: { submodules: false }
jobs:
    include:
        - stage: "Lint & Prebuild Docker Image"
          name: "General Lints"
          script:
            - set -e
            - "! git grep -n '^<<<<<<< '"  # Check for Git conflict markers
            - false
            - true

        - name: "Python Lints"
          language: python
          python: 3.8
          cache: pip
          install:
            - >-
              pip install --disable-pip-version-check
              black flake8 flake8-import-order
          script:
            - flake8 kuma docs tests
            - black --check --diff kuma docs tests

        - name: "JavaScript Lints"
          language: node_js
          node_js: 12
          cache: npm
          script:
            - scripts/ci-jslint
            - scripts/ci-flow

        - name: "Build Docker Image"
          cache:
            directories:
              - $HOME/docker
          script:
            - docker build -f docker/images/kuma_base/Dockerfile -t mdnwebdocs/kuma_base:latest .
          before_cache:
            - docker save -o $HOME/docker/images.tar mdnwebdocs/kuma_base:latest # $(docker images -a -q)
        - stage: "Test"
          name: "Documentation Build"
          language: python
          python: 3.8
          cache: pip
          install:
            - pip install -r docs/requirements.txt
          script:
            - sphinx-build -b html -d doctrees docs html

        - name: "Dockerized Tests"
          services: docker
          git: { submodules: true }
          cache:
            directories:
              - $HOME/docker
          before_install:
            - docker load -i $HOME/docker/images.tar
            - docker images --all
          script:
            - set -e
            # Build and boot containers
            - docker-compose up -d # 0:52
            # Gather info
            - id
            - pwd
            - ls -la .
            - ls -lna .
            - docker-compose exec -T web id
            - docker-compose exec -T web pwd
            - docker-compose exec -T web ls -la .
            - docker-compose exec -T web ls -lna .
            # Build assets
            - docker-compose exec -T web make clean # 0:01
            - docker-compose exec -T web make localecompile # 0:02
            - docker-compose exec -T web make build-static # 0:47
            # Ensure services are ready
            - docker-compose run --rm -T web urlwait mysql://root:kuma@mysql:3306/developer_mozilla_org 30 # 0:12
            - docker-compose run --rm -T web urlwait http://elasticsearch:9200 30 # 0:10
            # Django setup
            - docker-compose exec -T web ./manage.py migrate # 0:10
            - docker-compose exec -T web ./manage.py makemigrations --check --dry-run # 0:03
            # Run tests
            - docker-compose exec -T web make coveragetest # 3:35
            - docker-compose exec -T web npm test # 0:07
            # Refresh locales
            - docker-compose exec -T web make localeextract # 0:15
            - docker-compose exec -T web make localetest # 0:05
            - docker-compose exec -T web make localecompile # 0:02, redundant with above?
            - git -C locale diff -G "^msgid " templates/LC_MESSAGES # 0:01
            # Upload coverage
            - bash <(curl -s https://codecov.io/bash) # 0:02
